>>>>From my workstation

knife cookbook create webserver 
 
#under templates folder create index.html.erb with the following contents to be displayed on the web server
<html>
<head>
<title>Hello World</title>
</head>
<body>
<h1>Hello World </h1>
</body>
</html>


>>>>in /cookbooks/recipes/default.rb file i write the following code
#install mod_ssl package
package 'mod_ssl' do
action :install
end

#Install apache
package 'httpd' do
action :install
end

#start httpd service
service 'httpd' do
action :start
end

#create the template for the web server home page
template '/var/www/html/index.html' do
source 'index.html.erb'
mode “0644”
end

>>>>> from your workstation CLI
#upload the cookbook over webserver
knife cookbook upload webserver                

#bootstrap the node
knife bootstrap x.x.x.x 
   --ssh-user ubuntu 
  --sudo 
  --identity-file ./.chef/mykey.pem 
  --run-list webserver   
#command to view the web page content
curl https://nodeIP

>>>> SSH to AWS web server and run the command line 

#make a directory 'ssl' in apache configuration folder
sudo mkdir /etc/httpd/conf.d/ssl

#move into the directory
cd  ssl

#creating ssl certificates
openssl req –x509 –nodes –days  365 –newkey  rsa:2048 –keyout /etc/httpd/conf.d/ssl/apache.key –out /etc/apache2/ssl/apache.cert

#now goto httpd.conf directory and then /mods_available directory to find the ssl certificates
cd /etc/httpd/httpd.conf
cd mods_available

sudo a2enmod ssl
Cd sites-available
# create a file to configure virtualhost
Sudo vi default-ssl.conf

// <VitualHost  :*443>

documentRoot /var/www/html/index.html
SSLCertificateFile   /etc/apache2/ssl/apache.cert
SSLCertificateFile   /etc/apache2/ssl/apache.key
//
# enable the module using a2ensite
sudo a2ensite default-ssl.conf
sudo service httpd restart       #start the httpd service again to check
curl –k https://nodeip   #check your web page


#To perform the automated tests using testkitchen tool of Chef by configuring the .kitchen.yml file with the following code:


driver:
  name: vagrant

provisioner:
  name: chef_solo

platforms:
  - name: ubuntu-14.04
  - name: centos-7.0

suites:
  - name: source
    run_list:
      - recipe[webserver::httpd]
    config:
        log_level: ":debug"
        ssl_verify_mode: ":verify_peer"


#Serverspec tool setup

mkdir -p /opt/chef-ws/training/serverspec
cd -p /opt/chef-ws/training/serverspec

#setting up the Ruby helper script which loads Serverspec and sets the general configuration options used by the binary while executing tests

#Create aa recipe in /opt/chef-ws/training/serverspec /spec_helper.rb

require 'serverspec'
require 'pathname'

set :backend, :exec

set :path, '/bin:/usr/local/bin:$PATH'


#writing serverspec tests

#create a recipe in /opt/chef-ws/training/serverspec /apache_test.rb

describe package('httpd') do
  it { should be_installed }
end

describe package('mod_ssl') do
  it { should be_installed }
end

#Checking the package against ubuntu, converging it, verifying the packages and later destroying it

$ kitchen test package-ubuntu-1404
$ kitchen converge package-ubuntu-1404
$kitchen verify package-ubuntu-1404
kitchen destroy package-ubuntu-1404

#Checking the package against Centos, converging it, verifying the packages and later destroying it
$ kitchen test package- centos-7.0
$ kitchen converge package- centos-7.0
$kitchen verify package- centos-7.0
kitchen destroy package- centos-7.0


